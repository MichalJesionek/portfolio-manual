Test Plan for https://www.demoqa.com/*

Introduction:

This document outlines the testing approach for the website https://www.demoqa.com/* along with all of the subpages on which variety of functionalities are presented.
The purpose is to ensure the quality and functionality of the website using BlackBox testing methodology.

Scope:

The test plan covers testing of all functionalities available on the website https://www.demoqa.com/*.

Test Objectives:

Validate the functionality of each feature and element on the website.
Identify and report any defects or issues found during testing.
Ensure that the website meets the specified requirements and user expectations.

Test Environment:

Test environment:  
Operating System - Ubuntu 22.04.4 LTS with latest stable packages available and with GUI (GNOME v42.9 using Wayland windowing system)
Browser - Google Chrome version 123.0.6312.86 (Official Build)
Screen Resolution - 1920x1200
Processor - Intel Core i5-4440 CPU @ 3.10GHz Ã— 4
RAM - 16GB DDR4
Graphics Card - Mesa Intel HD Graphics 4600 (HSW GT2)
Internet Connection - Stable broadband connection with minimum 10 Mbps download and upload speeds.

Tools: Katalon and SoapUI for API testing, https://www.fakenamegenerator.com website to generate random data such as addresses, full names etc.

1. Elements of the Website:

1.1 Text Box:
Test Objective: Verify functionality of text boxes.

Test steps:
a. Open the website https://www.demoqa.com/text-box in the browser to initiate the testing process,
b. Fill the text boxes with valid data generated on https://www.fakenamegenerator.com (full name, email, current address, permament address),
c. Click on the "Submit" button,
d. Verify that the filled data is printed below the text boxes,
e. Ensure that proper validation messages are displayed for empty fields,
f. Verify if filled data are printed below text boxes if only one or few of the text boxes are filled,
g. Verify if change of data inside any of text boxes will result in changing it below text boxes after click on "Submit" button,
h. Verify if any error/informational message will be shown when no data will be provided inside the text boxes,
i. Verify the correct syntax validation for the email address box.

Expected Results:
a. The website https://www.demoqa.com/text-box loads successfully in the browser, displaying all elements without any missing layout components,
b. The text boxes for full name, email, current address, and permanent address are filled with valid data,
c. After clicking on the "Submit" button, the filled data is successfully submitted,
d. Verify that the filled data is printed below the text boxes without any grammatical or syntax errors, indicating successful submission,
e. Proper validation messages are displayed for any empty fields, guiding the user to fill them out,
f. If only one or a few of the text boxes are filled, only the filled data is printed below the text boxes, while the empty ones remain blank,
g. Any changes made to the data inside the text boxes are reflected below the text boxes after clicking on the "Submit" button,
h. If no data is provided inside the text boxes and the "Submit" button is clicked, an error or informational message is displayed prompting the user to fill out the required fields,
i. Correct syntax validation for the email address box ensures that only properly formatted email addresses are accepted. An error message is displayed or the text box is outlined when an invalid email address is entered.

1.2 Check Box:
Test Objective: Verify functionality of check boxes.

Test Steps:
a. Open the website https://www.demoqa.com/checkbox in the browser to initiate the testing process,
b. For single checkboxes, ensure that only one checkbox can be selected at a time by clicking on each available checkbox, also it's respective catalouge should be checked automatically,
c. For multiple checkboxes, ensure that multiple checkboxes can be selected simultaneously by clicking on few of available checkboxes, and their respective catalogs should be checked automatically. Additionally, if checking the checkbox for the entire catalog, all files within that catalog should be checked automatically,
d. Test the expanding and collapsing of the checkbox list:
 d.a. Verify if catalogs list is expanding and collapsing properly by clicking on the expand/collapse icon on the left from each catalog,
 d.b. Verify that clicking on the expand all icon (plus) expands the list to show nested checkboxes,
  d.b.a Click on the "Expand All" button and ensure that all nested checkboxes are expanded,
 d.c Verify that clicking on the collapse all icon (minus) collapses the list to hide nested checkboxes,
  d.c.a Click on the "Hide All" button and ensure that all nested checkboxes are collapsed,
e. Check if proper information about the checked checkboxes (labels of every checkbox) is displayed below the list:
 e.a. Verify that the labels of all checked checkboxes are displayed accurately and clearly below the list.

Expected Results:
a. The website https://www.demoqa.com/checkbox loads successfully in the browser, displaying all elements without any missing layout components,
b. When selecting a single checkbox, only that checkbox should be selected, and its respective catalog should be checked automatically,
c. When selecting multiple checkboxes simultaneously, all selected checkboxes should remain checked, and their respective catalogs should be checked automatically. Additionally, if the checkbox for an entire catalog is selected, all files within that catalog should be checked automatically,
d. Clicking on the expand/collapse icons should expand or collapse the respective catalog list. Clicking on the "Expand All" button should expand all nested checkboxes, ensuring all files are visible. Clicking on the "Hide All" button should collapse all nested checkboxes, hiding all files,
e. The labels of all checked checkboxes should be displayed accurately and clearly below the list, matching the checkboxes selected by the user.

1.3 Radio button:
Test Objective: Verify functionality of radio buttons.

Test steps:
a. Open the website https://www.demoqa.com/radio-button in the browser to initiate the testing process,
b. Verify the availability and functionality of each radio button:
 b.a. Click on each radio button to ensure it can be selected,
 b.b. Verify that selecting one radio button deselects any previously selected radio button,
 b.c. Ensure that all visible radio buttons are available for selection,
c. Validate the display of information about the chosen radio button:
 c.a. After selecting a radio button, verify that relevant information about the chosen option is printed below the radio buttons,
 c.b. Ensure that the displayed information includes the label or name of the selected radio button.

Expected Results:
a. The website https://www.demoqa.com/radio-button loads successfully in the browser, displaying all elements without any missing layout components,
b. Verify availability and functionality:
 b.a. Each radio button on the page can be clicked and selected individually,
 b.b. Selecting one radio button deselects any previously selected radio button, ensuring exclusive selection behavior,
 b.c. All visible radio buttons are present and available for selection without any missing or inaccessible options,
c. Validate display of information:
 c.a. After selecting a radio button, relevant information about the chosen option is accurately displayed below the radio buttons,
 c.b. The displayed information includes the label or name of the selected radio button, ensuring clear feedback for the user.

1.4 Web tables:
Test Objective: Verify functionality of web table.

Test steps:
a. Open the website https://www.demoqa.com/webtables in the browser to initiate the testing process,
b. Verify the presence and functionality of sorting options:
 b.a. Click on the header of each column (First Name, Last Name, Age, Email, Salary, Department),
 b.b. Confirm that clicking on a column header sorts the table data alphabetically or numerically based on that column,
 b.c. Ensure that clicking on the same column header again reverses the sorting order,
 b.d. Click on a different column header of each column (First Name, Last Name, Age, Email, Salary, Department) to sort the table data alphabetically or numerically based on that column, disregarding any previous sorting,
 b.e. Ensure that clicking on a different column header sorts the table data alphabetically or numerically based on that column, disregarding any previous sorting,
c. Verify the availability to change column width:
 c.a. Locate the column header and hover over between that header and the next one to reveal the option for changing the column width,
 c.b. Click on the pitch between headers and drag to adjust the width of the column,
 c.c. Ensure that the column width changes accordingly, allowing users to customize their view of the table.
d. Verify the functionality to change the number of displayed rows:
 d.a. Locate the dropdown menu or control for selecting the number of rows to display,
 d.b. Select different options (5, 10, 15, 20, 25, 50, 100) and verify that the table updates to display the specified number of rows,
 d.c. Ensure that pagination controls are provided if the number of rows exceeds the available space, allowing navigation through multiple pages using "Previous" and "Next" buttons, which should become active. Also, provide the exact page number to which you want to navigate to ensure that it is working properly,
e. Verify the ability to delete data from the table:
 e.a. Locate the delete option (trash icon) associated with each row of data,
 e.b. Click on the delete icon for a specific row and verify that the corresponding data is removed from the table,
f. Verify the ability to edit existing data in the table:
 f.a. Locate the edit icon (pen icon) associated with each row of data,
 f.b. Click on the edit icon for a specific row and modify any data (First Name, Last Name, Age, Email, Salary, Department) using generated data from https://www.fakenamegenerator.com,
 f.c. Verify the correct syntax validation for the age box, email address box, and salary box,
 f.d. Ensure that the changes are reflected in the table after editing,
g. Verify the ability to add new items to the table based on sorted data:
 g.a. Locate the "Add" button (visible on the left above the table) for adding a new item to the table,
 g.b. Confirm that a new popup window appears after clicking the "Add" button,
 g.c. Input data in all fields using generated data from https://www.fakenamegenerator.com website and click on the "Submit" button to add a new row to the table with data properly sorted according to the existing columns,
 g.d. Verify the correct syntax validation for the age box, email address box, and salary box,
 g.e. Ensure that the new item appears in the table and is sorted correctly based on the selected column,
h. Verify the ability to add new items to the table with incomplete data:
 h.a. Locate the "Add" button (visible on the left above the table) for adding a new item to the table,
 h.b. Confirm that a new popup window appears after clicking the "Add" button,
 h.c. Input data in only one field or in half of them using generated data from https://www.fakenamegenerator.com website and click on the "Submit" button to add a new row to the table with data properly sorted according to the existing columns,
 h.d. Ensure that proper validation messages are displayed for empty fields,
 h.e. Verify the correct syntax validation for the age box, email address box, and salary box,
 h.f. Ensure that displayed data form will not allow to add new table row without providing data in all of the required fields,
i. Verify the functionality of the search feature:
 i.a. Locate the search input field or search bar provided for searching within the table (visible on the right above the table),
 i.b. Enter specific keywords or data to search for within the table,
 i.c. Verify that the table updates to display only the rows that match the search criteria.

Expected Results:
a. The website https://www.demoqa.com/webtables loads successfully in the browser, displaying all elements without any missing layout components,
b. Clicking on the header of each column (First Name, Last Name, Age, Email, Salary, Department) should sort the table data alphabetically or numerically based on that column,
 b.a. Clicking on the same column header again should reverse the sorting order,
 b.b. Clicking on the other column header should sort the table data alphabetically or numerically based on that column ignoring previous sorting,
c. Hovering over between the column headers should reveal the option for adjusting the column width,
 c.a. Clicking and dragging between column headers should adjust the width of the column accordingly, allowing users to customize their view of the table.
d. Selecting different options (5, 10, 15, 20, 25, 50, 100) from the dropdown menu for the number of rows to display should update the table to show the specified number of rows,
d.a. Pagination controls should be provided if the number of rows exceeds the available space, allowing navigation through multiple pages using "Previous" and "Next" buttons. The page number provided manually should accurately navigate to the desired page,
e. Clicking on the delete option (trash icon) associated with each row of data should remove the corresponding row from the table,
f. Clicking on the edit icon (pen icon) associated with each row of data should allow modification of any data in new popup window (First Name, Last Name, Age, Email, Salary, Department),
 f.a. The correct syntax validation for the age box, email address box, and salary box should be enforced,
 f.b. Changes made should be reflected in the table after editing,
g. Clicking on the "Add" button should reveal a popup window for adding a new item to the table,
 g.a. Entering data in all fields using generated data from https://www.fakenamegenerator.com website and clicking on the "Submit" button should add a new row to the table with data properly sorted according to the existing columns,
 g.b. The correct syntax validation for the age box, email address box, and salary box should be enforced,
 g.c. The new item should appear in the table and be sorted correctly based on the selected column,
h. Clicking on the "Add" button should reveal a popup window for adding a new item to the table,
 h.a. Entering data in only one field or in half of them using generated data from https://www.fakenamegenerator.com website and clicking on the "Submit" button should not allow adding a new table row without providing data in all of the required fields,
 h.b. Proper validation messages should be displayed for empty fields,
 h.c. The correct syntax validation for the age box, email address box, and salary box should be enforced,
i. Entering specific keywords or data in the search input field should update the table to display only the rows that match the search criteria.

1.5 Buttons:
Test Objective: Verify functionality of buttons.

Test steps:
a. Open the website https://www.demoqa.com/buttons in the browser to initiate the testing process,
b. Click on each button accordingly to its label: "Double Click Me" - double click, "Right Click Me" - right mouse button, "Click Me" - single click,
 b.a. Ensure that all of the buttons can be clicked according to their respective labels,
 b.b. Ensure that proper information is displayed below all buttons according to the button which was clicked,
 b.c. Ensure that displayed information is changing according to the button which was clicked with disregarding previously clicked button.

Expected Results:
a. The website https://www.demoqa.com/buttons loads successfully in the browser, displaying all buttons without any missing layout components,
b. After clicking on each button:
 b.a. Verify that all of the buttons can be clicked according to their respective labels,
 b.b. Confirm that proper information is displayed below all buttons according to the button which was clicked,
 b.c. Ensure that the displayed information changes according to the button which was clicked, disregarding any previously clicked button.

1.6 Links:
Test Objective: Verify functionality of embedded links.

Test steps:
a. Open the website https://www.demoqa.com/links in the browser to initiate the testing process,
b. Click on the embedded "Home" link. Ensure that it opens in a new tab,
c. Click on the second embedded link below the "Home" link. Note that its label may dynamically change after reloading the webpage, but it should look like "Home[additional text]". Ensure that it opens in a new tab,
d. Click on the embedded "Created" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response,
e. Click on the embedded "No Content" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response,
f. Click on the embedded "Moved" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response,
g. Click on the embedded "Bad Request" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response,
h. Click on the embedded "Unauthorized" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response,
i. Click on the embedded "Forbidden" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response,
j. Click on the embedded "Not Found" link. In the developer tools of the browser, navigate to the Network tab and verify that clicking on the link sends a proper API call and receives a proper API code response by recording that call and its response.

Expected Results:
a. The website https://www.demoqa.com/links loads successfully in the browser, displaying all elements without any missing layout components,
b. After clicking on the embedded "Home" link, the website https://www.demoqa.com should open in a new tab,
c. After clicking on the second embedded link below the "Home" link, note that its label may dynamically change after reloading the webpage, but it should resemble "Home[here is dynamically changing additional text]". The website https://www.demoqa.com should open in a new tab,
d. After clicking on the embedded "Created" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]",
e. After clicking on the embedded "No Content" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]",
f. After clicking on the embedded "Moved" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]",
g. After clicking on the embedded "Bad Request" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]",
h. After clicking on the embedded "Unauthorized" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]",
i. After clicking on the embedded "Forbidden" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]",
j. After clicking on the embedded "Not Found" link, a proper API call should be made, and a proper API code response should be received. The informational prompt should display: "Link has responded with status [API response code] and status text [corresponding to the currently clicked embedded link label]".

1.6 Links:
Test Objective: Verify functionality of displaying images and embedded links.

Test steps:
a. Open the website https://www.demoqa.com/broken in the browser to initiate the testing process,
b. Ensure that image is properly dsiplayed below "Valid image" title,
c. Confirm that a broken/missing image icon is displayed below the "Broken image" title,
d. Locate the embedded link labeled as "Click Here for Valid Link" below the "Valid Link" title and click on it to ensure it redirects to the correct destination, specifically https://www.demoqa.com website,
e. Locate the embedded link labeled as "Click Here for Broken Link" below the "Broken Link" title and click on it to ensure it redirects to an error page (specifically to https://the-internet.herokuapp.com/status_codes/500) or shows an error message.

Expected Results:
a. The website https://www.demoqa.com/broken loads successfully in the browser, displaying all elements without any missing layout components. However, below the "Broken image" title, there should be an intentional broken image icon indicating an issue with the image source or loading,
b. After initiating the testing process, below the "Valid image" title, a properly displayed image should be visible, confirming its validity,
c. Below the "Broken image" title, a broken/missing image icon should be displayed, indicating an issue with the image source or loading,
d. After locating the embedded link labeled "Click Here for Valid Link" below the "Valid Link" title, clicking on it should redirect to the correct destination, specifically https://www.demoqa.com website,
e. Upon locating the embedded link labeled "Click Here for Broken Link" below the "Broken Link" title, clicking on it should lead to an error page or display an error message. Specifically, it should redirect to https://the-internet.herokuapp.com/status_codes/500, indicating an issue with the link.

1.7 Upload/Download files:
Test Objective: Verify the functionality of downloading files from the website and uploading files to the website from local storage.

Test Steps:
a. Open the website https://www.demoqa.com/upload-download in the browser to initiate the testing process.
b. Download File:
 b.a. Locate and click on the "Download" button,
 b.b. Verify that proper information about initiating the download process, including a progress bar, is displayed,
 b.c. Ensure that downloaded file size is not 0B and that it can be opened correctly.
c. Upload File:
 c.a. Locate and click on the "Choose File" button below the "Select a file" title,
 c.b. Verify that proper information about the maximum file size limit is displayed before initiating the upload process,
 c.c. Ensure that only one file at a time can be chosen from a local storage in the new popup window,
 c.d. Check that the following popular file extensions are supported: .jpg, .jpeg, .png, .gif, .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .zip, .rar,
 c.e. Verify that a proper error message is displayed when an unsupported file extension is chosen,
 c.f. Verify that a proper error message is displayed when the file size limit is exceeded,
 c.g. After choosing a proper file that meets the requirements, verify that the upload process to the website is initiated with a progress bar and current upload status. Ensure that the proper file name with its extension is displayed,
 c.h. After the upload process is finished, verify that proper information about finished process is displayed, including the path to which it was uploaded,
d. Verify Uploaded File:
 d.a. Confirm that the recently uploaded file can be downloaded to local storage,
 d.b. Ensure that the download process completes successfully and that the downloaded file can be opened without errors, indicating that files are properly uploaded to the website.

Expected Results:
a. The website https://www.demoqa.com/upload-download loads successfully in the browser, displaying all elements without any missing layout components.
b. Download File:
 b.a. After clicking on the "Download" button, proper information about initiating the download process, including a progress bar, should be displayed to the user,
 b.b. After downloading the file, verify and ensure that the file size is not 0B and that it can be opened correctly,
c. Upload File:
 c.a. Before initiating the upload process, proper information about the maximum file size limit should be displayed to the user,
 c.b. After clicking on the "Choose File" button below the "Select a file" title, a new popup window with a list of local disks/folders/files should be displayed to the user to allow choosing the file for upload,
 c.c. Only one file at a time should be selectable from local storage in the newly displayed popup window,
 c.d. Supported file extensions include .jpg, .jpeg, .png, .gif, .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .zip, .rar. An error message should be displayed if an unsupported file extension is chosen,
 c.e. If the file size limit is exceeded, a proper error message should be displayed to the user,
 c.f. After selecting a proper file meeting the requirements, the upload process to the website should initiate, displaying proper information such as a progress bar and current upload status to the user. The proper file name with its extension should also be displayed,
 c.g. After the upload process is finished, proper information about the finished process should be displayed to the user, including the path to which it was uploaded,
d. Verify Uploaded File:
 d.a. The recently uploaded file should be downloadable to local storage,
 d.b. The download process should complete successfully, and the downloaded file should be openable without errors, indicating that files are properly uploaded to the website.

2. Forms:

2.1 Practice Form:

Test Objective: Verify functionality of the practice form.
Test Steps:
Fill out the form with valid data.
Submit the form with incomplete data.
Expected Results:
Form submission successful with valid data.
Proper handling of incomplete submissions.
(Continue similarly for each section)

3. Alerts, Frames, and Windows:

(Include objectives, test steps, and expected results)

4. Widgets:

(Include objectives, test steps, and expected results)

5. Interactions:

(Include objectives, test steps, and expected results)

6. Book Store Application:

(Include objectives, test steps, and expected results)

Preconditions and Assumptions:

The website is accessible and functional.
Test environment is properly set up.
Test data is available for form submissions and interactions.
Test Data Management:

Test data will be managed using specific tool or approach.
Test data creation, storage, and cleanup will be automated.
Error Handling Scenarios:

Include test cases to verify error handling for invalid inputs, unexpected user actions, and server errors.
Test Execution and Reporting:

Tests will be executed using testing tool or framework.
Test results will be recorded in specified format or tool.
Issues or defects identified during testing will be reported in specified tool or system.
Review and Validation:

The test plan will be reviewed by stakeholders to ensure alignment with project requirements.
Test coverage will be validated against system functionality to ensure completeness.



6. Test Data:

Test data will be generated internally for form submissions, interactions, and other scenarios as needed.
7. Test Execution:

Execute each test case according to the defined steps.
Record test results, including pass/fail status, observations, and any defects found.
8. Error Handling:

Include test cases to verify error handling scenarios, such as invalid inputs, unexpected user actions, and server errors.
9. Reporting:

Test results will be documented in a test report.
Defects will be logged in the defect tracking system with proper prioritization and severity.
10. Review and Validation:

The test plan will be reviewed by stakeholders to ensure coverage and alignment with project requirements.
Test coverage will be validated against system functionality to ensure completeness.
11. Conclusion:

Upon completion of testing, a summary report will be prepared, highlighting key findings and recommendations for improvement.
